<?xml version="1.0" encoding="UTF-8"?>
<article id="editing_the_file">
  <title>Editing the file</title>

  <para>There are several ways to edit the data in the file. But you will only be able
  be to change the file in any way if the read-only mode is disabled. To enable or
  disable the read-only mode choose the <menuchoice><guimenu>Edit</guimenu>
  <guimenuitem>Read-only mode</guimenuitem></menuchoice> command. If the
  read-only mode is enabled, there will be "READ" written in the status bar
  and the menu item will be checked.</para>

  <section>
    <title>Using the mouse</title>
    <para>Frhed implements OLE drag-drop to allow you to move data in a file,
    between Frhed instances and even between Frhed and other applications.
    It follows similar standards to most OLE apps, but when dropping and
    there is more than one format you must choose which format(s) to insert
    and you need to specify which format(s) to transfer before you can drag
    data to other apps. To specify the formats to use and how to use them
    for OLE Drag-drop choose <menuchoice><guimenu>Options</guimenu>
    <guimenuitem>OLE Drag-drop</guimenuitem></menuchoice>. Currently Frhed can output
    "BinaryData" (used for transfers between Frhed instances), both types
    of hexdump as CF_TEXT, the special syntax as CF_TEXT and Rich Text
    Format for pasting properly formatted &amp; coloured hexdumps into
    wordprocessors</para>

    <para>When moving or copying data around in the file you don't have to choose which
    format as Frhed just does what you wanted.</para>

    <para>When you drag data over Frhed a flashing cursor shows where the data will
    be inserted.</para>

    <para>Below is a summary of the keys that can be used to control the drag
    operation and their effects.</para>

    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>
              <para>Button</para>
            </entry>
            <entry>
              <para>Effect</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para><keycap>ESC</keycap></para>
            </entry>
            <entry>
              <para>Cancel dragging operation</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>Left mouse</para>
            </entry>
            <entry>
              <para>Move data</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>Right/middle mouse</para>
            </entry>
            <entry>
              <para>Choose either Move or Copy from a menu/dialog on the drop</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><keycap>Ctrl</keycap></para>
            </entry>
            <entry>
              <para>Copy data</para>
            </entry>
          </row>
          <row>
            <entry>
              <para><keycap>Shift</keycap></para>
            </entry>
            <entry>
              <para>Overwrite data (can be combined with both Move and Copy)</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>Note that the Overwrite mode of the file is ignored when dropping.
    To overwrite existing data with that being dropped use the <keycap>Shift</keycap> key.</para>
  </section>

  <section>
    <title>Using the keyboard</title>
    <para>For overwriting data the overwriting entering mode must be enabled, that means,
    the status bar must show "OVR" somewhere. Toggle the entering mode with the Insert-key
    on the keyboard or choosing <menuchoice><guimenu>Edit</guimenu>
    <guimenuitem>Toggle entering mode</guimenuitem></menuchoice>. You can overwrite the data in the
    bytes section by moving the cursor to the appropriate position and pressing any of the
    hexadecimal digits 0-9 and a-f on the keyboard. The nibble the caret is marking currently
    will be set to that value and the caret will then go on to the next nibble. If the caret
    is in the bytes section, pressing any alphanumeric key will set the current byte (that
    wich the caret is marking) to that value, and the caret will go on to the next byte.</para>

    <para>For inserting data the status bar must show "INS" somewhere. Entering data now will
    insert a byte at the current position.</para>

    <para>If there is a selection then you can replace it with a single character.</para>
  </section>

  <section>
    <title>The <guimenu>Edit</guimenu> Menu</title>
    <section>
      <title>The <guimenuitem>Cut</guimenuitem> command</title>
      <para>This command is used to remove bytes from the file. These bytes can either be
      copied to the clipboard (as text with special syntax for non-character bytes)
      or just deleted. In the dialog you can choose the start offset where the
      cutting begins (the byte at that offset is the first to be cut), how many
      bytes to cut (specify either the offset of the last byte to cut or the number
      of bytes including the first byte to be cut, and check the appropriate radio
      button). If the data should be cut to the clipboard, check the checkbox on the
      bottom of the dialog box.</para>

      <para>If the command is chosen without a selection, then the values in the dialog
      will be set so that the byte at the current offset will be cut.</para>
    </section>

    <section>
      <title>The <guimenuitem>Copy</guimenuitem> command</title>
      <para>This command is used to copy bytes from the file to the clipboard. It is similar
      to the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Cut</guimenuitem></menuchoice> command,
      only the data will only be copied, not removed.</para>
    </section>

    <section>
      <title>The <guimenuitem>Paste</guimenuitem> command</title>
      <para>This either inserts or overwrites data from the clipboard starting at the current
      offset. Choose a radio button for the writing mode wished for. You can also choose
      how many times the current data is written and how many bytes to skip between each
      write of the data.</para>

      <para>If "Paste coded binary values as text" is unchecked, all data in the clipboard is
      considered to contain special syntax, so &lt;ld:150&gt; will not be written as the text "&lt;ld:150&gt;"
      but as a longword value of 150. Check the checkbox if you want to paste as text. The binary mode
      (Little or Big-endian) and character set (ANSI or OEM) is used as set in the options.</para>

      <para>You can also choose which clipboard data you want to paste.</para>

      <para>If one of the text formats (CF_DSPTEXT, CF_OEMTEXT, CF_TEXT and CF_UNICODETEXT)
      is chosen trailing null characters are not pasted. Also pasting CF_UNICODETEXT doesn't
      work unless "Paste coded binary values as text" is checked.  This is because the
      translation routine only works with single byte text.  Don't count on it but I (Pabs) may
      implement a Unicode version in the future.</para>

      <para>If any other format is used the full binary data is pasted.  As a consequence of the
      way Windows works, however, there may be some null/garbage bytes at the end of the pasted
      data.  This is because Windows allocates clipboard data in blocks (not sure what size) and
      when a program creates clipboard data in a buffer that does not fit exactly in to a number
      of blocks the remaining bytes are left zeroed out or filled with garbage.  This is fine
      (besides being wasteful) but Windows does not provide a way to look up the requested size
      of the data but only the allocated size.</para>

      <para>The list will be automatically updated when the contents of the clipboard change.</para>
    </section>

    <section>
      <title>The <guimenuitem>Paste with dialogue</guimenuitem> command</title>
      <para>This either inserts or overwrites data starting at the current offset. Choose a radio
      button for the writing mode wished for. The big edit-box is initialised with the current
      text content of the clipboard. Since Edit-boxes can not hold very large amounts of data
      (ca. 64K), please use Edit or Paste to paste such large blocks of memory.You can also choose
      how many times the current data is written and how many bytes to skip between each
      write of the data.</para>

      <para>If "Paste coded binary values as text" is unchecked, all data in the edit-box is
      considered to contain special syntax, so <code>&lt;ld:150&gt;</code> will not be written as the text
      "&lt;ld:150&gt;" but as a longword value of 150. Check the checkbox if you want to paste
      as text. The binary mode (Little or Big-endian) and character set (ANSI or OEM)
      is used as set in the options.</para>
    </section>

    <section>
      <title>The <guimenuitem>Append</guimenuitem> command</title>
      <para>This command appends a number of zero-bytes to the file.</para>
    </section>

    <section>
      <title>The <guimenuitem>Delete</guimenuitem> command</title>
      <para>This command calls the same dialog as the <menuchoice><guimenu>Edit
      </guimenu><guimenuitem>Cut</guimenuitem></menuchoice>
      command, only with the "cut to clipboard" checkbox already disabled.</para>
    </section>

    <section>
      <title>The <guimenuitem>Select</guimenuitem> block command</title>
      <para>With this you can explicitely choose what block of data is to be selected, by specifying
      the start and end offsets of the block.</para>
    </section>

    <section>
      <title>The <guimenuitem>Enter decimal value</guimenuitem> command</title>
      <para>With this you can overwrite data with an integer value of either byte, word or longword size.
      The start offset is initialized with the current offset, in hexadecimal notation. Note that if
      you change the start offset, use hexadecimal notation and prefix with "x". You can also choose
      the number of times to overwrite or insert and the size of the value. The values are initialised
      with the current offset, the value of the current offset, byte size and 1 time.</para>
    </section>

    <section>
      <title>The <guimenuitem>Manipulate bits</guimenuitem> command</title>
      <para>If you need to manipulate individual bits in a byte, then go to this byte with the caret and
      choose the command. Check the appropriate checkboxes for the bits and select OK. The boxes are
      initialised with the current value.</para>
    </section>

    <section>
      <title>The <guimenuitem>Fill selection with</guimenuitem> command</title>
      <para>First select some of the bytes in a file then open the Fill selection with dialog from the
      edit menu or using Ctrl + Shift + F. If there is no selection it is assumed that the whole file
      needs to be filled.</para>

      <para>Decide if you want to enter the bytes in yourself - this is usefull for small numbers
      of bytes and if so select Input from the combo box and enter the bytes below it.</para>

      <para>Otherwise you may want to fill the selection with a file by selecting File from the
      combo box and browsing to a file (It <emphasis>MUST</emphasis> exist - this is why only browsing is allowed).
      Note that if the selection is larger than the file or the hex string you entered the
      selection will be filled with multiple copies of your string/file and if it is smaller
      only a part of the string will be entered into the selection.
      Note also that an odd number of hex digits will result in the first nibble of the last
      byte being the last hex digit entered (This doesn't apply to files as partial bytes
      cannot be present in files).</para>

      <screen>e.g. "ffa" &rarr; "ff af fa &hellip;" &rarr; "ÿ¯ú &hellip;"</screen>

      <para>Then select the type of assignment operator you want to use:</para>

      <variablelist>
        <varlistentry>
          <term>=</term>
          <listitem>
            <simpara>Regular assign.</simpara>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>|=</term>
          <listitem>
            <simpara>Perform a bitwise or with the current byte and then assign.</simpara>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&amp;=</term>
          <listitem>
            <simpara>Perform a bitwise and with the current byte and then assign.</simpara>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>^=</term>
          <listitem>
            <simpara>Perform a bitwise xor with the current byte and then assign.</simpara>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Below are some examples:</para>

      <informaltable frame="none">
        <tgroup cols="6">
          <colspec colname="c1" colwidth="16*"/>
          <colspec colname="c2" colwidth="16*"/>
          <colspec colname="c3" colwidth="16*"/>
          <colspec colname="c4" colwidth="16*"/>
          <colspec colname="c5" colwidth="16*"/>
          <colspec colname="c6" colwidth="16*"/>
          <tbody>
            <row>
              <entry align="center" morerows="1" valign="middle">
                <para>Input/File Bit</para>
              </entry>
              <entry align="center" morerows="1" valign="middle">
                <para>Open File Bit</para>
              </entry>
              <entry align="center" nameend="c6" namest="c3" valign="middle">
                <para>Result bit</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>=</para>
              </entry>
              <entry>
                <para>|=</para>
              </entry>
              <entry>
                <para>&amp;=</para>
              </entry>
              <entry>
                <para>^=</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>0</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>0</para>
              </entry>
              <entry>
                <para>1</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
              <entry>
                <para>1</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
              <entry>
                <para>1</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
              <entry>
                <para>1</para>
              </entry>
              <entry>
                <para>1</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
              <entry>
                <para>1</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>1</para>
              </entry>
              <entry>
                <para>1</para>
              </entry>
              <entry>
                <para>1</para>
              </entry>
              <entry>
                <para>1</para>
              </entry>
              <entry>
                <para>1</para>
              </entry>
              <entry>
                <para>0</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section>
      <title>The <guimenuitem>Reverse bytes</guimenuitem> command</title>
      <para>This will reverse the order of some bytes around in the file.</para>

      <para>You will need to specify the two ends of the block whose bytes will be reversed.</para>

      <para>You can prefix an 'x' to specify hex notation.</para>

      <para>The selection and caret will be moved intelligently.</para>
    </section>

    <section>
      <title>The <guimenuitem>Move/Copy bytes</guimenuitem> command</title>
      <para>This will move or copy some bytes around in the file.</para>

      <para>You will need to specify one end of the block to be moved
      or copied and either its length (negative* if the specified
      end is to be the end with the larger offset, positive if is
      to be the start of the block) or its other end.</para>

      <para>You will also need to specify either where to position the
      first (or the last) byte of the block or how many bytes
      forward or backward* to move or copy the block.</para>

      <para>You can prefix an 'x' to specify hex notation.</para>

      <para>It is possible to copy the block to a position inside of itself.</para>

      <para>The selection and caret will be moved intelligently.</para>

      <para>* Start with a minus (-) before the 'x' if any.</para>
    </section>

    <section>
      <title>The <guimenuitem>Compare from current offset</guimenuitem> command</title>

      <para>If you need to compare two files then load one into Frhed and choose this
      command. You will first be prompted to choose the file to compare with.
      Choose a file and then the OK button. Comparison will occur from the current caret offset.</para>

      <para>If the chosen file matches the data in the loaded file from the current offset, you will
      be prompted so. Otherwise you will get a list of areas of difference to choose from. Areas
      of difference are ranges of bytes which are different in the files. For example:</para>

<screen>File 1: 00 01 02 03 04 (loaded file)
File 2: 00 ff ff 03 04</screen>

      <para>In this case you will  get one area of difference 2 bytes in size from offset 1 to 2.
      These offsets are measured relative to the current caret position. When you choose an area
      of difference then it will be selected and displayed in the main window.</para>

      <para>You can also copy the list of differences to the clipboard.</para>
    </section>

    <section>
      <title>The <guimenuitem>Get floating point value</guimenuitem> command</title>
      <para>This will show you the floating point values starting at the current caret position.</para>
    </section>

    <section>
      <title>The <guimenuitem>File properties</guimenuitem> command</title>
      <para>Choose this to get the filename, path and size of the current file,
      and also the total number of lines of the hexdump.</para>
    </section>

    <section>
      <title>The <guimenuitem>Apply template</guimenuitem> command</title>

      <para>Use this command to apply a binary template on the file.
      A binary template consists of a text file with the extension
      "tpl" that contains a number of variable type+name combinations,
      such as this:</para>

<screen>BYTE filetype
WORD version
DWORD filelength</screen>

      <para>This sample template file named "sample.tpl" is included in the Frhed directory. When the command
      is chosen from the menu you will be prompted to choose the template file you want to apply. Frhed will
      then load that file and use the code in it to give you a structured "interpretation" of the data in the
      currently loaded file, starting at the current byte. The result will be displayed in the edit-box of a
      dialog, from where you can copy the result to the clipboard if necessary. The result looks like this:</para>

    <screen>File: C:\Data\test.dat
Template file: C:\frhed\sample.tpl
Applied at offset: 15

BYTE filetype = 66 (signed) = 66 (unsigned) = 0x42 = 'B'
WORD version = 30285 (signed) = 30285 (unsigned) = 0x764d
DWORD filelength = 8 (signed) = 8 (unsigned) = 0x8

-&gt; Length of template = 7 bytes.</screen>

      <para>Following variable types are recognized: (recognition is
      case-sensitive, so "byte" is not recognized as type "BYTE")</para>

      <itemizedlist>
        <listitem>
          <simpara>a byte-size value: &quot;BYTE&quot;, &quot;char&quot;</simpara>
        </listitem>
        <listitem>
          <simpara>a word-size value: &quot;WORD&quot;, &quot;short&quot;</simpara>
        </listitem>
        <listitem>
          <simpara>a longword-size value: &quot;DWORD&quot;, &quot;int&quot;,
          &quot;long&quot;, &quot;LONG&quot;</simpara>
        </listitem>
        <listitem>
          <simpara>a float value: &quot;float&quot;</simpara>
        </listitem>
        <listitem>
          <simpara>a double value: &quot;double&quot;</simpara>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>The <guimenuitem>Open in text editor</guimenuitem> command</title>
      <para>This function attempts to call an external text editing program with the current file as argument.
      You have the option of saving the file first. The default editor is the Windows Notepad. You can
      choose the editor in the <menuchoice><guimenu>Options</guimenu><guimenuitem>View Settings</guimenuitem></menuchoice> dialog.</para>
    </section>
  </section>
</article>